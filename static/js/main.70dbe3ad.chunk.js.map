{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","helpers/errorHandler.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","SetStatusAC","type","SetErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","Task","props","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","style","Delete","Todolist","useDispatch","useEffect","thunk","todolist","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","entityStatus","removeTodolist","opacity","map","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","ErrorSnackbar","app","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","AppBar","background","position","Toolbar","edge","Menu","textAlign","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHA0DYA,EAOAC,E,iCCnDGC,G,MAZS,SAACC,GACjBA,GAAeA,GACf,8BAAqBC,MAAK,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QACxDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,Q,sGDDdO,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAKTE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAN5EF,EAAe,SASTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAV9CJ,EAAe,SAaTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdzDF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAoBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArBlER,EAAe,SAuBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA8DI,EAA9D,UAAkF,CAACL,MAAOO,KAxB5FT,EAAe,SA0BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,K,SAiBpF1B,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEhEZ,IAAM0B,EAAe,CACjBC,OAAQ,OACRC,MAAM,MAwBGC,EAAc,SAACF,GACxB,MAAO,CAACG,KAAK,iBAAiBH,OAAOA,IAE5BI,EAAa,SAACH,GACvB,MAAO,CAACE,KAAK,gBAAgBF,MAAMA,IC3B1BI,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASH,EAAWE,EAAKE,SAAS,KAElCD,EAASH,EAAW,eAExBG,EAASL,EAAY,YAGZQ,EAA2B,SAACT,EAAUM,GAC/CA,EAASH,EAAWH,EAAMU,UAC1BJ,EAASL,EAAY,YCTnBH,EAA0C,G,QCC1CA,EAA+B,GAsFxBa,EAAe,SAAChB,EAAgBiB,EAAwClB,GAAzD,OACxB,SAACY,EAAiCO,GAE9B,IACMC,EADQD,IACKE,MAAMrB,GAAYsB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOI,KACxD,IAAKmB,EAID,OAFAR,EAASH,EAAW,qCACpBG,EAASL,EAAY,WAIzB,IAAMiB,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChBjC,MAAOyB,EAAKzB,MACZU,OAAQe,EAAKf,QACVa,GAGPzB,EAAwBO,EAAYC,EAAQuB,GACvC3C,MAAK,SAACgD,GACH,GAA4B,IAAxBA,EAAIlB,KAAKmB,WAAkB,CAC3BlB,EAASL,EAAY,YACrB,IAAMwB,EAzEE,SAAC9B,EAAgBE,EAAkCH,GAAnD,MACvB,CAACQ,KAAM,cAAeL,QAAOH,aAAYC,UAwEX+B,CAAa/B,EAAQiB,EAAalB,GACjDY,EAASmB,GACTnB,EAASL,EAAY,mBAErBG,EAAqBmB,EAAIlB,KAAMC,MAGtCqB,OAAM,SAAC3B,GACRS,EAAyBT,EAAMM,Q,mDCtH9BsB,EAAcC,IAAMC,MAAK,YAAsD,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,SACtDC,QAAQC,IAAI,sBACZ,MAAwBC,mBAAS,IAAjC,mBAAK9C,EAAL,KAAY+C,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,mBAAKnC,EAAL,KAAYqC,EAAZ,KAEMC,EAAiB,WAEE,KAAjBjD,EAAMkD,QACNR,EAAQ1C,GACR+C,EAAS,KAETC,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRzC,QAASA,EACT0C,MAAOrD,EACPsD,SAjBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAV5C,GACAqC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYjD,EACZgC,SAAUA,IAErB,cAACkB,EAAA,EAAD,CAAYC,MAAM,UAAUnB,SAAUA,EAAUoB,QAASd,EAAzD,SACI,cAACe,EAAA,EAAD,YCvCCC,EAAezB,IAAMC,MAAK,YAA6D,IAAlDY,EAAiD,EAAjDA,MAAMC,EAA2C,EAA3CA,SAASX,EAAkC,EAAlCA,SAC7DC,QAAQC,IAAI,uBACZ,MAA8BC,oBAAS,GAAvC,mBAAKoB,EAAL,KAAeC,EAAf,KACA,EAAwBrB,mBAASO,GAAjC,mBAAKrD,EAAL,KAAY+C,EAAZ,KAeA,OAAOmB,EACE,cAACf,EAAA,EAAD,CAAWE,MAAOrD,EAAOsD,SALd,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAI4Be,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZb,EAAStD,MAQP,sBAAM+D,QAfa,WACjBpB,GACJwB,GAAY,GACZpB,EAASM,IAYP,SAAkCA,O,kBCf/BiB,EAAO9B,IAAMC,MAAK,SAAC8B,GAC5B,IAAMC,EAAiBC,uBAAY,kBAAMF,EAAMG,WAAWH,EAAM9C,KAAKvB,GAAIqE,EAAMlE,cAAa,CAACkE,EAAM9C,KAAKvB,GAAIqE,EAAMlE,aAE5GsE,EAAkBF,uBAAY,SAAClB,GACjC,IAAIqB,EAAiBrB,EAAEC,cAAcqB,QACrCN,EAAMO,iBAAiBP,EAAM9C,KAAKvB,GAAI0E,EAAiB9F,EAAaiG,UAAYjG,EAAakG,IAAKT,EAAMlE,cACzG,CAACkE,EAAM9C,KAAKvB,GAAIqE,EAAMlE,aAEnB4E,EAAuBR,uBAAY,SAACS,GACtCX,EAAMY,gBAAgBZ,EAAM9C,KAAKvB,GAAIgF,EAAUX,EAAMlE,cACtD,CAACkE,EAAM9C,KAAKvB,GAAIqE,EAAMlE,aAEzB,OAAO,sBAAyB+E,UAAWb,EAAM9C,KAAKf,SAAW5B,EAAaiG,UAAY,UAAY,GAA/F,UACH,cAACM,EAAA,EAAD,CACIR,QAASN,EAAM9C,KAAKf,SAAW5B,EAAaiG,UAC5CO,MAAO,CAACxB,MAAM,SACdR,SAAUqB,IAGd,cAACV,EAAD,CAAetB,SAAU4B,EAAM5B,SAAUU,MAAOkB,EAAM9C,KAAKzB,MAAOsD,SAAU2B,IAC5E,cAACpB,EAAA,EAAD,CAAYE,QAASS,EAArB,SACI,cAACe,EAAA,EAAD,QATShB,EAAM9C,KAAKvB,OCHnBsF,EAAWhD,IAAMC,MAAK,SAAU8B,GACzC3B,QAAQC,IAAI,mBAEZ,IAAM5B,EAAWwE,cACjBC,qBAAU,WACN,IJwBqBrF,EIxBfsF,GJwBetF,EIxBMkE,EAAMqB,SAAS1F,GJwBE,SAACe,GACjDL,EAAY,WACZd,EAAsBO,GACjBnB,MAAK,SAACgD,GACH,IACME,EATQ,SAACV,EAAwBrB,GAAzB,MACrB,CAACQ,KAAM,YAAaa,QAAOrB,cAQLwF,CADD3D,EAAIlB,KAAK8E,MACUzF,GACjCY,EAASmB,GACTxB,EAAY,gBACb0B,OAAM,SAAC3B,GACVS,EAAyBT,EAAOM,QIhChCA,EAAS0E,KACV,IAEH,IAAMI,EAAUtB,uBAAY,SAACzE,GACzBuE,EAAMwB,QAAQ/F,EAAOuE,EAAMqB,SAAS1F,MACrC,CAACqE,EAAMwB,QAASxB,EAAMqB,SAAS1F,KAK5B8F,EAAsBvB,uBAAY,SAACzE,GACrCuE,EAAMyB,oBAAoBzB,EAAMqB,SAAS1F,GAAIF,KAC9C,CAACuE,EAAMqB,SAAS1F,GAAIqE,EAAMyB,sBAEvBC,EAAoBxB,uBAAY,kBAAMF,EAAM2B,aAAa,MAAO3B,EAAMqB,SAAS1F,MAAK,CAACqE,EAAMqB,SAAS1F,GAAIqE,EAAM2B,eAC9GC,EAAuB1B,uBAAY,kBAAMF,EAAM2B,aAAa,SAAU3B,EAAMqB,SAAS1F,MAAK,CAACqE,EAAMqB,SAAS1F,GAAIqE,EAAM2B,eACpHE,EAA0B3B,uBAAY,kBAAMF,EAAM2B,aAAa,YAAa3B,EAAMqB,SAAS1F,MAAK,CAACqE,EAAMqB,SAAS1F,GAAIqE,EAAM2B,eAG5HG,EAAmB9B,EAAM7C,MAS7B,MAP8B,WAA1B6C,EAAMqB,SAASU,SACfD,EAAmB9B,EAAM7C,MAAM4E,QAAO,SAAA1E,GAAC,OAAIA,EAAElB,SAAW5B,EAAakG,QAE3C,cAA1BT,EAAMqB,SAASU,SACfD,EAAmB9B,EAAM7C,MAAM4E,QAAO,SAAA1E,GAAC,OAAIA,EAAElB,SAAW5B,EAAaiG,cAGlE,gCACH,+BAAI,cAACd,EAAD,CAActB,SAA0C,YAAhC4B,EAAMqB,SAASW,aAA4BlD,MAAOkB,EAAMqB,SAAS5F,MAC3EsD,SAAU0C,IACxB,cAACnC,EAAA,EAAD,CAAYE,QAxBG,WACnBQ,EAAMiC,eAAejC,EAAMqB,SAAS1F,KAuBKyC,SAA0C,YAAhC4B,EAAMqB,SAASW,aAClDjB,MAAO,CAACmB,QAAyC,YAAhClC,EAAMqB,SAASW,aAA6B,MAAQ,IADjF,SAEI,cAAChB,EAAA,EAAD,CAAQD,MAAO,CAACxB,MAAO,cAG/B,cAACvB,EAAD,CAAaG,QAASqD,EAASpD,SAA0C,YAAhC4B,EAAMqB,SAASW,eACxD,8BAEQF,EAAiBK,KAAI,SAAA9E,GAAC,OAAI,cAAC0C,EAAD,CAAM3B,SAA0C,YAAhC4B,EAAMqB,SAASW,aAAuC9E,KAAMG,EACtEvB,WAAYkE,EAAMqB,SAAS1F,GAC3BwE,WAAYH,EAAMG,WAClBS,gBAAiBZ,EAAMY,gBACvBL,iBAAkBP,EAAMO,kBAJkClD,EAAE1B,SAQpG,sBAAKoF,MAAO,CAACqB,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQxD,QAAmC,QAA1BmB,EAAMqB,SAASU,OAAmB,WAAa,OACxDvC,QAASkC,EACTnC,MAAO,UAFf,iBAKA,cAAC8C,EAAA,EAAD,CAAQxD,QAAmC,WAA1BmB,EAAMqB,SAASU,OAAsB,WAAa,OAC3DvC,QAASoC,EACTrC,MAAO,UAFf,oBAIA,cAAC8C,EAAA,EAAD,CAAQxD,QAAmC,cAA1BmB,EAAMqB,SAASU,OAAyB,WAAa,OAC9DvC,QAASqC,EACTtC,MAAO,YAFf,gCCpEC+C,EAA0B,WACnC,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFpF,EAAQqF,aAA8C,SAAAC,GAAK,OAAIA,EAAMtF,SACrET,EAAWwE,cAEjBC,qBAAU,WACN,IAAMC,ENwBH,SAAC1E,GACJA,EAASL,EAAY,YACrBd,IACKZ,MAAK,SAACgD,GACHjB,EAZmD,CAACJ,KAAM,gBAAiBiG,UAYnD5E,EAAIlB,OAC5BC,EAASL,EAAY,YACtB0B,OAAM,SAAC3B,GACVS,EAAyBT,EAAMM,OM9BnCA,EAAS0E,KACV,IAEH,IAAMjB,EAAaD,uBAAY,SAAUvE,EAAYG,GAEjD,IAAMsF,ELkCc,SAACrF,EAAgBD,GAAjB,OAAwC,SAACY,GACjEA,EAASL,EAAY,YACrBd,EAAwBO,EAAYC,GAC/BpB,MAAK,WACF,IAAMkD,EA1BU,SAAC9B,EAAgBD,GAAjB,MACvB,CAACQ,KAAM,cAAeP,SAAQD,cAyBR4G,CAAa3G,EAAQD,GACpCY,EAASmB,GACTnB,EAASL,EAAY,iBACtB0B,OAAM,SAAC3B,GACVS,EAAyBT,EAAOM,OK1ClBiG,CAAahH,EAAIG,GAC/BY,EAAS0E,KACV,IAEGI,EAAUtB,uBAAY,SAAUzE,EAAeK,GACjD,IAAMsF,ELwCW,SAAC3F,EAAeK,GAAhB,OAAuC,SAACY,GAC7DA,EAASL,EAAY,YACrBd,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAAgD,GAEF,GAA4B,IAAxBA,EAAIlB,KAAKmB,WAAkB,CAC3BlB,EAASL,EAAY,YACrB,IACMwB,EAtCjB,CAACvB,KAAM,WAAYY,KAqCKS,EAAIlB,KAAKA,KAAKmG,MAE3BlG,EAASmB,GACTnB,EAASL,EAAY,mBAErBG,EAAqBmB,EAAIlB,KAAMC,MAEpCqB,OAAM,SAAC3B,GACVS,EAAyBT,EAAOM,OKvDlBmG,CAAUpH,EAAOK,GAC/BY,EAAS0E,KACV,IAEG0B,EAAe5C,uBAAY,SAAUvE,EAAYQ,EAAsBL,GACzE,IAAMsF,EAAQrE,EAAapB,EAAI,CAACQ,UAASL,GACzCY,EAAS0E,KACV,IAEGR,EAAkBV,uBAAY,SAAUvE,EAAYoH,EAAkBjH,GACxE,IAAMsF,EAAQrE,EAAapB,EAAI,CAACF,MAAOsH,GAAWjH,GAClDY,EAAS0E,KACV,IAEGO,EAAezB,uBAAY,SAAUpB,EAAyBhD,GAChE,IAAM+B,ENfmE,CAC7EvB,KAAM,yBACNX,GMa0CG,ENZ1CiG,OMYsDjD,GAClDpC,EAASmB,KACV,IAEGoE,EAAiB/B,uBAAY,SAAUvE,GACzC,INKyBG,EMLnBsF,GNKmBtF,EMLMH,ENM5B,SAACe,GACJA,EArBgF,CACpFJ,KAAM,gCACNX,GAmB0CG,EAlB1CkG,aAkBsD,YAClDzG,EAA4BO,GACvBnB,MAAK,WAEF+B,EAtCgB,SAACf,GAAD,MAAiB,CAACW,KAAM,kBAAmBX,MAsClDqH,CAAiBlH,IAC1BY,EAASL,EAAY,iBACtB0B,OAAM,SAAC3B,GACVS,EAAyBT,EAAOM,QMbpCA,EAAS0E,KACV,IAEGK,EAAsBvB,uBAAY,SAAUvE,EAAYF,GAC1D,IAAM2F,EN8BuB,SAACzF,EAAYF,GAC9C,OAAO,SAACiB,GACJA,EAASL,EAAY,YACrBd,EAA4BI,EAAIF,GAC3Bd,MAAK,SAACgD,GACyB,IAAxBA,EAAIlB,KAAKmB,YACTlB,EAlEiB,SAACf,EAAYF,GAAb,MAAgC,CACjEa,KAAM,wBACNX,KACAF,SA+DyBwH,CAAsBtH,EAAIF,IACnCiB,EAASL,EAAY,eAErBG,EAAqBmB,EAAIlB,KAAMC,MAGtCqB,OAAM,SAAC3B,GAAD,OACHS,EAAyBT,EAAMM,OM3CzBwG,CAAsBvH,EAAIF,GACxCiB,EAAS0E,KACV,IAEG+B,EAAcjD,uBAAY,SAACzE,GAC7B,IAAM2F,ENQe,SAAC3F,GAC1B,OAAO,SAACiB,GACJA,EAASL,EAAY,YACrBd,EAA4BE,GACvBd,MAAK,SAACgD,GACyB,IAAxBA,EAAIlB,KAAKmB,YACTlB,EAlDsC,CAACJ,KAAM,eAAgB+E,SAkDtC1D,EAAIlB,KAAKA,KAAKmG,OACrClG,EAASL,EAAY,eAErBG,EAAqBmB,EAAIlB,KAAMC,MAGtCqB,OAAM,SAAC3B,GACJS,EAAyBT,EAAOM,OMrB1B0G,CAAc3H,GAC5BiB,EAAS0E,KACV,CAAC1E,IAGJ,OAAO,qCACH,cAAC2G,EAAA,EAAD,CAAMC,WAAS,EAACvC,MAAO,CAACwC,QAAS,QAAjC,SACI,cAACvF,EAAD,CAAaG,QAASgF,MAE1B,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQjB,EAAUJ,KAAI,SAAAsB,GACV,IAAIC,EAAmBvG,EAAMsG,EAAG9H,IAEhC,OAAO,cAAC0H,EAAA,EAAD,CAAMT,MAAI,EAAV,SACH,cAACe,EAAA,EAAD,CAAO5C,MAAO,CAACwC,QAAS,QAAxB,SACI,cAACtC,EAAD,CACII,SAAUoC,EACVtG,MAAOuG,EACPvD,WAAYA,EACZwB,aAAcA,EACdH,QAASA,EACTjB,iBAAkBuC,EAClBb,eAAgBA,EAChBrB,gBAAiBA,EACjBa,oBAAqBA,OAXVgC,EAAG9H,a,kBCvEjCiI,GAAgB,WACzB,IAAMxH,EAAQoG,aAAyC,SAAAC,GAAK,OAAIA,EAAMoB,IAAIzH,SACpED,EAASqG,aAAiD,SAAAC,GAAK,OAAIA,EAAMoB,IAAI1H,UACnF,EAAwB8B,IAAMM,UAAS,GAAvC,mBAAauF,GAAb,WACMpH,EAAWwE,cAEX6C,EAAc,SAACC,EAA8BC,GAEhC,cAAXA,IAGJvH,EAASH,EAAW,OACpBG,EAASL,EAAY,SACrByH,GAAQ,KAGZ,OAAO,gCACH,cAACI,EAAA,EAAD,CAAUC,KAAgB,OAAV/H,EAAgBgI,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAACO,EAAA,EAAD,CAAOD,QAASN,EAAaQ,SAAS,QAAtC,SACKnI,MAGT,cAAC8H,EAAA,EAAD,CAAUC,KAAiB,cAAXhI,EAAwBiI,iBAAkB,IAAMC,QAASN,EAAzE,SACI,cAACO,EAAA,EAAD,CAAOD,QAASN,EAAaQ,SAAS,UAAtC,0CCEGC,OAvBf,WACI,IAAMrI,EAASqG,aAAiD,SAAAC,GAAK,OAAIA,EAAMoB,IAAI1H,UAEnF,OACI,sBAAK0E,UAAU,MAAf,UACI,eAAC4D,EAAA,EAAD,CAAQ1D,MAAO,CAAC2D,WAAY,SAAUC,SAAS,SAA/C,UAEI,eAACC,EAAA,EAAD,WACI,cAACtF,EAAA,EAAD,CAAYuF,KAAK,QAAQ9D,MAAO,CAACxB,MAAO,UAAW,aAAW,OAA9D,SACI,cAACuF,EAAA,EAAD,MAEJ,cAACzC,EAAA,EAAD,CAAQtB,MAAO,CAACgE,UAAW,UAAWxF,MAAM,UAA5C,sBAEQ,YAAXpD,GAAwB,cAAC6I,EAAA,EAAD,CAAgBzF,MAAM,iBAEnD,eAAC0F,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAAC,EAAD,IACA,cAAC,GAAD,W,kBCnBVC,GAAcC,aAAgB,CAChCjI,MRAwB,WAAgF,IAA/EsF,EAA8E,uDAAtDvG,EAAc2B,EAAwC,uCACvG,OAAQA,EAAOvB,MACX,IAAK,cACD,OAAO,2BAAImG,GAAX,kBAAmB5E,EAAO/B,WAAa2G,EAAM5E,EAAO/B,YAAYiG,QAAO,SAAA1E,GAAC,OAAIA,EAAE1B,KAAOkC,EAAO9B,YAChG,IAAK,WACD,OAAO,2BAAI0G,GAAX,kBAAmB5E,EAAOX,KAAKmI,WAA/B,CAA6CxH,EAAOX,MAApD,mBAA6DuF,EAAM5E,EAAOX,KAAKmI,gBACnF,IAAK,cACD,OAAO,2BACA5C,GADP,kBAEK5E,EAAO/B,WAAa2G,EAAM5E,EAAO/B,YAC7BqG,KAAI,SAAA9E,GAAC,OAAIA,EAAE1B,KAAOkC,EAAO9B,OAAhB,2BAA6BsB,GAAMQ,EAAO5B,OAASoB,OAEzE,IAAK,eACD,OAAO,2BAAIoF,GAAX,kBAAmB5E,EAAOwD,SAAS1F,GAAK,KAC5C,IAAK,kBACD,IAAM2J,EAAS,eAAO7C,GAEtB,cADO6C,EAAUzH,EAAOlC,IACjB2J,EACX,IAAK,gBACD,IAAMA,EAAS,eAAO7C,GAItB,OAHA5E,EAAO0E,UAAUgD,SAAQ,SAAA9B,GACrB6B,EAAU7B,EAAG9H,IAAM,MAEhB2J,EAEX,IAAK,YACD,OAAO,2BAAI7C,GAAX,kBAAmB5E,EAAO/B,WAAa+B,EAAOV,QAClD,QACI,OAAOsF,IQ3BfF,UTF4B,WAAsG,IAArGE,EAAoG,uDAAjEvG,EAAc2B,EAAmD,uCACjI,OAAQA,EAAOvB,MACX,IAAK,kBACD,OAAOmG,EAAMV,QAAO,SAAA0B,GAAE,OAAIA,EAAG9H,KAAOkC,EAAOlC,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAYkC,EAAOwD,UAAnB,IAA6BU,OAAQ,MAAOC,aAAc,UAA1D,mBAAsES,IAC1E,IAAK,wBACD,OAAOA,EAAMN,KAAI,SAAAsB,GAAE,OAAIA,EAAG9H,KAAOkC,EAAOlC,GAAjB,2BAA0B8H,GAA1B,IAA8BhI,MAAOoC,EAAOpC,QAASgI,KAChF,IAAK,yBACD,OAAOhB,EAAMN,KAAI,SAAAsB,GAAE,OAAIA,EAAG9H,KAAOkC,EAAOlC,GAAjB,2BAA0B8H,GAA1B,IAA8B1B,OAAQlE,EAAOkE,SAAU0B,KAClF,IAAK,gBACD,OAAO5F,EAAO0E,UAAUJ,KAAI,SAAAsB,GAAE,kCAASA,GAAT,IAAa1B,OAAQ,MAAOC,aAAc,YAC5E,IAAK,gCACD,OAAOS,EAAMN,KAAI,SAAAsB,GAAE,OAAIA,EAAG9H,KAAOkC,EAAOlC,GAAjB,2BAA0B8H,GAA1B,IAA8BzB,aAAcnE,EAAOmE,eAAgByB,KAC9F,QACI,OAAOhB,ISZfoB,IXHsB,WAAoF,IAAnFpB,EAAkF,uDAAxDvG,EAAc2B,EAA0C,uCACzG,OAAQA,EAAOvB,MACX,IAAK,iBACD,OAAO,2BAAImG,GAAX,IAAkBtG,OAAQ0B,EAAO1B,SACrC,IAAK,gBACD,OAAO,2BAAIsG,GAAX,IAAiBrG,MAAMyB,EAAOzB,QAClC,QACI,OAAOqG,MWDN+C,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DC,OAAOJ,MAAQA,GCZfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRQ,SAASC,eAAe,SAM5BxL,K","file":"static/js/main.70dbe3ad.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '6bab46ac-4e96-4e71-a9f9-0ebc29812cdd'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry ) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error:null as ErrorType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state,error:action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//types\r\ntype ActionsType = SetErrorType|SetStatusType\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\nexport type SetErrorType = ReturnType<typeof SetErrorAC>\r\nexport type SetStatusType = ReturnType<typeof SetStatusAC>\r\n\r\n//actions\r\nexport const SetStatusAC = (status:RequestStatusType) =>{\r\n    return {type:'APP/SET-STATUS',status:status}as const\r\n}\r\nexport const SetErrorAC = (error:ErrorType) =>{\r\n    return {type:'APP/SET-ERROR',error:error}as const\r\n}","import {SetErrorAC, SetErrorType, SetStatusAC, SetStatusType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetErrorType | SetStatusType>) => {\r\n    if (data.messages.length)\r\n        dispatch(SetErrorAC(data.messages[0]))\r\n    else {\r\n        dispatch(SetErrorAC('Some error'))\r\n    }\r\n    dispatch(SetStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error:any,dispatch:Dispatch<SetErrorType|SetStatusType>) =>{\r\n    dispatch(SetErrorAC(error.message))\r\n    dispatch(SetStatusAC('failed'))\r\n\r\n}","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetErrorAC, SetStatusAC, SetStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../helpers/errorHandler\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n    id: id,\r\n    entityStatus: status\r\n} as const)\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(SetStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(SetStatusAC('idle'))\r\n            }).catch((error) => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(SetStatusAC('succeeded'))\r\n            }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(SetStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(SetStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(SetStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(SetStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) =>\r\n                handleServerNetworkError(error,dispatch)\r\n            )\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof SetErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | SetTodolistsActionType | SetStatusType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetErrorAC, SetStatusAC, SetStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../helpers/errorHandler\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    SetStatusAC('loading')\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            SetStatusAC('succeeded')\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(SetStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(SetStatusAC('loading'))\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(SetStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            dispatch(SetErrorAC('task not found in the state'))\r\n            dispatch(SetStatusAC('failed'))\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(SetStatusAC('loading'))\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(SetStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetStatusType | ReturnType<typeof SetErrorAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" disabled={disabled} onClick={addItemHandler}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled:boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({value,onChange,disabled}: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled)\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    disabled:boolean\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            style={{color:'green'}}\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan  disabled={props.disabled} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan disabled={props.todolist.entityStatus === 'loading'} value={props.todolist.title}\r\n                          onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                        style={{opacity: props.todolist.entityStatus === 'loading' ? '50%' : ''}}>\r\n                <Delete style={{color: 'red'}}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task disabled={props.todolist.entityStatus === 'loading'} key={t.id} task={t}\r\n                                                todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ErrorType, RequestStatusType, SetErrorAC, SetStatusAC} from \"../../app/app-reducer\";\r\nimport React from \"react\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const [open, setOpen] = React.useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(SetErrorAC(null))\r\n        dispatch(SetStatusAC('idle'))\r\n        setOpen(false)\r\n\r\n    }\r\n    return <div>\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n        <Snackbar open={status === 'succeeded'} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\">\r\n                Change was successful!\r\n            </Alert>\r\n        </Snackbar>\r\n    </div>\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{background: 'green'}} position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" style={{color: 'yellow'}} aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Button style={{textAlign: 'center'}} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n                <ErrorSnackbar/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app:appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}